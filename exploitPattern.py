###############################################################################
# exploitPattern
#
# This script generates the standard 'Aa0' exploit pattern string, and also
# allows a user to search for a given substring in the pattern. Arbitrary
# length patterns may be generated and searched. However, beyond 'Zz9',
# uniqueness is no longer guaranteed.
#
# Created: 7 Jul 2011
#
# Copyright (c) 2012 - * | Eugene Ching <eugene@enegue.com>
#
# All rights reserved.
#
###############################################################################

import sys


###############################################################################
# Helper functions
###############################################################################

def increment(i):
  '''
  Increments the 'pattern', without carry.
  
  '''
  # 0-9
  if (i.isdigit()):
    if (i == '9'): i = '0'
    else: i = str(int(i)+1)
      
  # a-z
  elif (i.islower()):
    if (i == 'z'): i = 'a'
    else: i = chr(ord(i)+1)
  
  # A-Z
  elif (i.isupper()):
    if (i == 'Z'): i = 'A'
    else: i = chr(ord(i)+1)
  
  # Error
  else:
    print '[*] Error while incrementing pattern. Exiting'
    sys.exit(-1)
  
  return i  


def generate(nLength):
  '''
  Generates the pattern.

  Note that only 'Aa0' -> 'Zz9' is guaranteed unique. However, the
  generator will continue to generate patterns beyond 'Zz9', by
  inserting an 'A' at the start of the pattern, so that arbitrary
  Gength patterns can be generated.

  '''
  szPattern = ['A', 'a', '0']
  szOutput = ''
  
  while (len(szOutput) < nLength):
    last = len(szPattern) - 1

    # Add to output string
    for i in range(0, last+1):
      szOutput += szPattern[i]
    
    # Increment pattern
    done = 0
    while (1):
      szPattern[last] = increment(szPattern[last])
      if (szPattern[last] == '0' or szPattern[last] == 'a' or szPattern[last] == 'A'):
        last -= 1
        
        # Wrap around occurred, extend pattern (e.g. Zz9 -> AAa0)
        # Warning: Uniqueness lost
        if (last == -1):
          szPattern.insert(0, 'A')
          break
      else:
        break
        
  return szOutput[:nLength]


def search(szSearch):
  '''
  Finds the first occurance of a string.

  We generate the output string in the same way as generate().

  '''
  szPattern = ['A', 'a', '0']
  szOutput = ''
  
  while (1):
    last = len(szPattern) - 1

    # Add to output string
    for i in range(0, last+1):
      szOutput += szPattern[i]
    
    # Increment pattern
    while (1):
      szPattern[last] = increment(szPattern[last])
      if (szPattern[last] == '0' or szPattern[last] == 'a' or szPattern[last] == 'A'):
        last -= 1
        
        # Wrap around occurred, extend pattern (e.g. Zz9 -> AAa0)
        # Warning: Uniqueness lost
        if (last == -1):
          szPattern.insert(0, 'A')
          break
      else:
        break
    
    # Search pattern
    loc = szOutput.find(szSearch)
    if (loc != -1):
    	return loc
    

if __name__ == '__main__':
  '''
  Main script.

  '''
  if (len(sys.argv) == 2 and sys.argv[1].isdigit()):
    szPattern = generate(int(sys.argv[1]))
    print szPattern
    print
    print 'Generated %i chars.' % len(szPattern)

  elif (len(sys.argv) == 2 and not (sys.argv[1].isdigit())):
  	print search(sys.argv[1]), '(starting index 0)'

  else:
    print 'exploitPattern.py <length> | <pattern to search for>'
    print '  e.g.: exploitPattern.py 10000  (generate pattern of 10000 chars)'
    print '        exploitPattern.py Ms0    (find "Ms0" in pattern)'
